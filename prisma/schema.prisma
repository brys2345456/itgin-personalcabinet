generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  products        Product[]  @relation("StoreToProduct")
  sizes           Size[]     @relation("StoreToSize")
  colors          Color[]     @relation("StoreToColor")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model cars {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(255)
  seats  Int
  scheme String @db.VarChar(255)
}

model cities {
  id    Int    @id @default(autoincrement())
  city  String @db.VarChar(255)
  emoji String @db.VarChar(255)
}

model drivers {
  id                  Int     @id @default(autoincrement())
  chat_id             BigInt  @unique
  name                String? @db.VarChar(255)
  registration_number String? @db.VarChar(255)
  phone               String? @db.VarChar(255)
}

model local_orders {
  id                 Int      @id @default(autoincrement())
  client             String   @db.VarChar(255)
  city               String   @db.VarChar(255)
  pickup_location    String   @db.VarChar(255)
  direction_location String?  @db.VarChar(255)
  driver             Int?
  comment            String?  @db.VarChar(255)
  phone              String?  @db.VarChar(255)
  price              String?  @db.VarChar(255)
  createdAt          DateTime @db.Timestamptz(6)
  updatedAt          DateTime @db.Timestamptz(6)

  @@map("local-orders")
}

model locations {
  id      Int    @id @default(autoincrement())
  city    String @db.VarChar(255)
  country String @db.VarChar(255)
}

/// We could not retrieve columns for the underlying table. Either it has none or you are missing rights to see them. Please check your privileges.
// model newtable {
// }

model orders {
  id        Int      @id @default(autoincrement())
  user      Int
  ride_id   Int
  seat      Int
  comment   String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
}

model rides {
  id       Int    @id @default(autoincrement())
  route_id Int
  car_id   Int?
  seats_id Int?
  price    Int?
  time     String @db.VarChar(255)
  date     Int
  month    Int
  year     Int
}

model routes {
  id             Int    @id @default(autoincrement())
  departure_city String @db.VarChar(255)
  arrival_city   String @db.VarChar(255)
}

model seats {
  id      Int   @id @default(autoincrement())
  ride_id Int
  car_id  Int
  seats   Int[]
}

model taxi_routes {
  id             Int       @id @default(autoincrement())
  departure_city String    @db.VarChar(255)
  target_city    String    @db.VarChar(255)
  area           String    @db.VarChar(255)
  departure_time DateTime? @db.Timestamptz(6)
  arrival_time   DateTime? @db.Timestamptz(6)
}

model users {
  id              Int      @id @default(autoincrement())
  chat_id         BigInt   @unique
  favorite_city   String?  @db.VarChar(255)
  phone           String?  @db.VarChar(255)
  dialogue_status String?  @db.VarChar(255)
  createdAt       DateTime @db.Timestamptz(6)
  updatedAt       DateTime @db.Timestamptz(6)
}


model Order {
  id        String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    // Foreign Key to Color
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}


model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}



model Size {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model prices {
  id                  Int     @id @default(autoincrement())
  basePrice           Int
  distancePrice       Int
}